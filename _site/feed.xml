<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Behnam Azizi&#39;s Codeblog</title>
    <description>A place for coders, hackers and script kiddies!
</description>
    <link>http://bazizi.github.io/</link>
    <atom:link href="http://bazizi.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 14 Nov 2015 10:45:51 -0800</pubDate>
    <lastBuildDate>Sat, 14 Nov 2015 10:45:51 -0800</lastBuildDate>
    <generator>Jekyll v3.0.0</generator>
    
      <item>
        <title>Create your own Agar.io game server</title>
        <description>&lt;p&gt;In this post I am going to explain how to create your own game Agar.io server
and play with friends. We will use an open-source implementation of Agar.io
named Ogar. The following instruction are done in Ubuntu (or any other similar
    distribution). In order to play with friends, you need to be under the
    same network (Unless you want to use a VPN server as a relay point).&lt;/p&gt;

&lt;h2 id=&quot;requirements&quot;&gt;Requirements:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Windows/Linux/Mac (The following instructions will be for Linux only)&lt;/li&gt;
  &lt;li&gt;nodeJS&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;git CLI (If you’re a Windows user, you can download git CLI from
&lt;a href=&quot;https://git-scm.com/downloads&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Download the source code&lt;/strong&gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    git clone git://github.com/OgarProject/Ogar.git&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Install WebSocket module in nodeJS&lt;/strong&gt;:
Agar.io makes heavy use of WebSockets. To install the module run the following
command (without changing your current directory):&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    npm install ws&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Startup your Agar.io server:&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    npm install ws&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Finally, you (and your friends) can navigate to &lt;a href=&quot;http://127.0.0.1:443&quot;&gt;http://127.0.0.1:443&lt;/a&gt;
to play the game&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;configuring-your-server&quot;&gt;Configuring your server:&lt;/h2&gt;
&lt;p&gt;To configure the game server, you can modify the file &lt;code&gt;src/gameserver.ini&lt;/code&gt;.
Some of the game variables you can change:
- Size of food
- Initial size of cells
- Maximum size of cells
- Split size&lt;/p&gt;

&lt;p&gt;Additionally, you can run commands that change game variables in real-time.
For a list of commands please refer to &lt;a href=&quot;https://github.com/OgarProject/Ogar/tree/master/src&quot;&gt;Ogar Project on Github&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 14 Nov 2015 00:00:00 -0800</pubDate>
        <link>http://bazizi.github.io/jekyll/update/2015/11/14/create-your-own-agar-io-game-server.html</link>
        <guid isPermaLink="true">http://bazizi.github.io/jekyll/update/2015/11/14/create-your-own-agar-io-game-server.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Linux: Mounting Windows drives on startup</title>
        <description>&lt;p&gt;In this post I am going to explain how to mount Windows drives on start up.
In this example, my Windows machine has drives &lt;code&gt;C&lt;/code&gt;, &lt;code&gt;D&lt;/code&gt; and &lt;code&gt;E&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;preparing-the-mount-points&quot;&gt;1. Preparing the mount points&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;The first step is to create some mount points to mount the Windows drives&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;behnam@behnam-Aspire-5733 ~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /media
behnam@behnam-Aspire-5733 ~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo mkdir C D E tmp&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;We will use the &lt;code&gt;tmp/&lt;/code&gt; directory in the above to test the partitions and
find out which partition corresponds to which Windows drive (i.e., &lt;code&gt;C&lt;/code&gt;, &lt;code&gt;D&lt;/code&gt; or &lt;code&gt;E&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;finding-the-mount-partitions&quot;&gt;2. Finding the mount partitions&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;The next step is to find out which partitions should be mounted&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;behnam@behnam-Aspire-5733 ~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo fdisk -l

Disk /dev/sda: 500.1 GB, 500107862016 bytes
255 heads, 63 sectors/track, 60801 cylinders, total 976773168 sectors
Units &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; sectors of 1 &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt; 512 &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 512 bytes
Sector size &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;logical/physical&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: 512 bytes / 4096 bytes
I/O size &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;minimum/optimal&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;: 4096 bytes / 4096 bytes
Disk identifier: 0x17d6956b

   Device Boot      Start         End      Blocks   Id  System
/dev/sda1            2048    33556479    16777216   27  Hidden NTFS WinRE
/dev/sda2   &lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;    33556480    33761279      102400    7  HPFS/NTFS/exFAT
/dev/sda3        33761280   351658699   158948710    7  HPFS/NTFS/exFAT
/dev/sda4       351660030   976769023   312554497    f  W95 Ext&lt;span class=&quot;se&quot;&gt;\&#39;&lt;/span&gt;d &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;LBA&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Partition 4 does not start on physical sector boundary.
/dev/sda5       547524608   771766271   112120832    7  HPFS/NTFS/exFAT
/dev/sda6       771768320   976769023   102500352    7  HPFS/NTFS/exFAT
/dev/sda7       351660032   539811839    94075904   83  Linux
/dev/sda8       539813888   547510271     3848192   82  Linux swap / Solaris

Partition table entries are not &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;disk order&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;The next step is to test each of the NTFS drives to find out which one of the
partitions are either of &lt;code&gt;C&lt;/code&gt;, &lt;code&gt;D&lt;/code&gt; or &lt;code&gt;E&lt;/code&gt; drive. In the following example,
I tested &lt;code&gt;/dev/sda3&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;behnam@behnam-Aspire-5733 ~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo mount /dev/sda3 /media/tmp
behnam@behnam-Aspire-5733 ~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /media/tmp
behnam@behnam-Aspire-5733 ~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;ls&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Now based on the contents of the directory you should be able to find out
which drive (&lt;code&gt;C&lt;/code&gt;, &lt;code&gt;D&lt;/code&gt; or &lt;code&gt;E&lt;/code&gt;) the above partition corresponds to. In my case
it was &lt;code&gt;C&lt;/code&gt; drive (All the following instruction are only for this partition).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;modiying-fstab&quot;&gt;3. Modiying “fstab”&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Assuming that you want to mount the &lt;code&gt;C&lt;/code&gt; drive (That we just found to be
&lt;code&gt;/dev/sda3&lt;/code&gt;), edit &lt;code&gt;/etc/fstab&lt;/code&gt; and add the following entry at the end of the
file:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;/dev/sda3     /media/C           ntfs-3g    rw              0       0&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;You need to repeat the above step for all other windows partitions that you
have.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;testing&quot;&gt;4. Testing&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;To test you &lt;code&gt;/etc/fstab&lt;/code&gt; file, you need to run the following command:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;behnam@behnam-Aspire-5733 ~ &lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo mount -a&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Look for any errors (If applicable) to be able to fix your &lt;code&gt;fstab&lt;/code&gt; file if
required&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;an-example&quot;&gt;5. An example&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Finally, here is how my &lt;code&gt;/etc/fstab&lt;/code&gt; looks like (Some of the lines may
be unrelated to this particular blog post):&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# /etc/fstab: static file system information.&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Use &#39;blkid&#39; to print the universally unique identifier for a&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# device; this may be used with UUID= as a more robust way to name devices&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# that works even if disks are added and removed. See fstab(5).&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;#&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# &amp;lt;file system&amp;gt; &amp;lt;mount point&amp;gt;   &amp;lt;type&amp;gt;  &amp;lt;options&amp;gt;       &amp;lt;dump&amp;gt;  &amp;lt;pass&amp;gt;&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# / was on /dev/sda7 during installation&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;UUID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;dd3fcb27-0764-44bc-8a76-0b2cbf8d4978 /               ext4    &lt;span class=&quot;nv&quot;&gt;errors&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;remount-ro 0       1
&lt;span class=&quot;c&quot;&gt;# swap was on /dev/sda8 during installation&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;UUID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;7370b7ec-2a04-4dac-97e0-f68e983f9ed5 none            swap    sw              0       0
/dev/sda3     /media/C           ntfs-3g    rw              0       0
/dev/sda5     /media/E          ntfs-3g    rw               0       0
/dev/sda6     /media/D          ntfs-3g    rw               0       0&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

</description>
        <pubDate>Fri, 06 Nov 2015 00:00:00 -0800</pubDate>
        <link>http://bazizi.github.io/jekyll/update/2015/11/06/linux-mounting-windows-drives-on-startup.html</link>
        <guid isPermaLink="true">http://bazizi.github.io/jekyll/update/2015/11/06/linux-mounting-windows-drives-on-startup.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Run C++ like a scripting language/Create your own bash command</title>
        <description>&lt;p&gt;Here I am going to explain how to run C++ like any other scripting language.&lt;br /&gt;
In addition, I am going to explain how to define your own bash command.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This tutorial assumes you have &lt;code&gt;g++&lt;/code&gt; installed. If not, run the following:
&lt;code&gt;sudo apt-get install g++&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Goal:&lt;/strong&gt; When I run &lt;code&gt;cpp abc.cpp&lt;/code&gt;, I want the shell to compile and execute
the  C++ file named &lt;code&gt;abc.cpp&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Open up &lt;code&gt;~/.bashrc&lt;/code&gt; as a super-user:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;sudo vim ~/.bashrc&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Add the following function anywhere (preferably at the end) in the file&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;table style=&quot;border-spacing: 0&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter gl&quot; style=&quot;text-align: right&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;cpp&lt;span class=&quot;o&quot;&gt;(){&lt;/span&gt;
  g++ &lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; ./a.out
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Done. From now on you can run your C++ scripts the same way you run a scripting
language (e.g., Python, Ruby etc.) by just doing:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;cpp &amp;lt;script name&amp;gt;&lt;/code&gt;&lt;/p&gt;
</description>
        <pubDate>Thu, 05 Nov 2015 00:00:00 -0800</pubDate>
        <link>http://bazizi.github.io/2015/11/05/run-c-like-a-scripting-language.html</link>
        <guid isPermaLink="true">http://bazizi.github.io/2015/11/05/run-c-like-a-scripting-language.html</guid>
        
        
      </item>
    
      <item>
        <title>My very first post</title>
        <description>&lt;p&gt;This is my very first post. In here I will be blogging about my interesting technical experiences.
Here are some topics I will be blogging about:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;New programming languages and technologies&lt;/li&gt;
  &lt;li&gt;Interesting programming puzzles and their solutions&lt;/li&gt;
  &lt;li&gt;Scripts that make daily tasks easy&lt;/li&gt;
  &lt;li&gt;Good software development practices&lt;/li&gt;
  &lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 04 Nov 2015 00:00:00 -0800</pubDate>
        <link>http://bazizi.github.io/jekyll/update/2015/11/04/my-very-first-post.html</link>
        <guid isPermaLink="true">http://bazizi.github.io/jekyll/update/2015/11/04/my-very-first-post.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
  </channel>
</rss>
